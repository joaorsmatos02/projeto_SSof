class Vulnerability():
    def __init__(self, policy):
        self.ilegal_flows = {}
        self.patterns_vulnerabilities_number = []
        patterns = policy.getAllPatterns()
        for pattern in patterns:
            pattern_name = pattern.get_vulnerability()
            self.patterns_vulnerabilities_number.append((pattern_name, 1))


    def create_vulnerability(self, multilabelling, pattern, target, target_line): 
        vulnerability_name = ""   
        for pattern_and_number in self.patterns_vulnerabilities_number:
            if pattern.get_vulnerability() == pattern_and_number[0]:
                vulnerability_name = pattern.get_vulnerability() + str(pattern_and_number[1])
                pattern_and_number[1] = pattern_and_number[1] + 1


        #ir buscar as sources

        multilabel_target = multilabelling.get_Multilabel(target)
        label_target = multilabel_target.get_label(pattern.get_vulnerability())        
        sources = label_target.get_sources()
        sanitizers_on_target = label_target.get_sanitizers()

        sink = (target, str(target_line))

        unsanitized_flows = "no"

        sanitizers_on_pattern = pattern.get_sanitizer()

        for sanitizer in sanitizers_on_pattern:
            inside = False
            for sanitizer_in in sanitizers_on_target:
                if sanitizer_in[0] == sanitizer:
                    inside = True
            
            if not inside :
                unsanitized_flows = "yes"
                break

        for source in sources:
            self.ilegal_flows.append(IlegalFlow(vulnerability_name, source, sink, unsanitized_flows, sanitizers_on_target))

        return

    


class IlegalFlow:
    def __init__(self, vulnerability, source, sink, unsanitized_flow, sanitized_flows) :
        self.Vulnerability = vulnerability
        self.source = source
        self.sink = sink
        self.unsanitized_flow = unsanitized_flow
        self.sanitized_flows = sanitized_flows
        return self