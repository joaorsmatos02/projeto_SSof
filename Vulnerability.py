class Vulnerability():
    def __init__(self, policy):
        self.ilegal_flows = []
        self.patterns_vulnerabilities_number = {}
        patterns = policy.getAllPatterns()
        for pattern in patterns:
            pattern_name = pattern.get_vulnerability()
            self.patterns_vulnerabilities_number[pattern_name] = 1


    def create_vulnerability(self, multilabelling, pattern, target, target_line, argument, labels_sanitized_flows): 
        vulnerability_name = ""   

        #ir buscar as sources
        multilabel_argument = multilabelling.get_Multilabel(argument)
        label_argument = multilabel_argument.get_label(pattern.get_vulnerability())        
        sources = label_argument.get_sources()
        sanitizers_on_argument = label_argument.get_sanitizers()
        
        if sanitizers_on_argument and sanitizers_on_argument[0] == []:
            sanitizers_on_argument = sanitizers_on_argument[1:]

        sink = (target, str(target_line))

        unsanitized_flows = "no"
        


        for label in labels_sanitized_flows:
            if label.get_sanitizers() == [] or len(label.get_sanitizers()) == 1:
                unsanitized_flows = "yes"

                
        for source in sources:
            if source[0] != sink[0]:
                for pattern_name, number in self.patterns_vulnerabilities_number.items():
                    if pattern.get_vulnerability() == pattern_name:
                        vulnerability_name = pattern.get_vulnerability() + "_" +str(number)
                        self.patterns_vulnerabilities_number[pattern_name] = number + 1
                        
                new_ilegal_flow = IlegalFlow(vulnerability_name, source, sink, unsanitized_flows, sanitizers_on_argument)
                
                if all(new_ilegal_flow != existing_flow for existing_flow in self.ilegal_flows):
                    self.ilegal_flows.append(IlegalFlow(vulnerability_name, source, sink, unsanitized_flows, sanitizers_on_argument))

        return
    
    def get_vulnerabilities_print(self):
        result = []
        for ilegal_flow in self.ilegal_flows:
            result_flow = "{"
            result_flow = result_flow + "\"vulnerability\": \"" + ilegal_flow.get_vulnerability() + "\", "
            result_flow = result_flow + "\"source\": [\"" + ilegal_flow.get_source()[0] + "\", " + str(ilegal_flow.get_source()[1]) + "], "
            result_flow = result_flow + "\"sink\": [\"" + ilegal_flow.get_sink()[0] + "\", " + ilegal_flow.get_sink()[1] +"], "
            result_flow = result_flow + "\"unsanitized_flows\": \"" + ilegal_flow.get_unsanitized_flow() + "\", "
            result_flow = result_flow + "\"sanitized_flows\": " + str(ilegal_flow.get_sanitized_flows())
            result_flow = result_flow + "}"
            result.append(result_flow)

        return result    

class IlegalFlow:
    def __init__(self, vulnerability, source, sink, unsanitized_flow, sanitized_flows) :
        self.vulnerability = vulnerability
        self.source = source
        self.sink = sink
        self.unsanitized_flow = unsanitized_flow
        self.sanitized_flows = sanitized_flows

    def get_vulnerability(self):
        return self.vulnerability 
       
    def get_source(self):
        return self.source 
    
    def get_sink(self):
        return self.sink
    
    def get_unsanitized_flow(self):
        return self.unsanitized_flow

    def get_sanitized_flows(self):
        return self.sanitized_flows
    
    def __eq__(self, other):
        if isinstance(other, IlegalFlow):
            self_splitted = self.vulnerability.split("_")[0]
            other_splitted = other.vulnerability.split("_")[0]
            return (
                self_splitted == other_splitted and
                self.source == other.source and
                self.sink == other.sink 
                # and
                # self.unsanitized_flow == other.unsanitized_flow and
                # self.sanitized_flows == other.sanitized_flows
            )
        return False