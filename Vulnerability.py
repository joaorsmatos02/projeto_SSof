class Vulnerability():
    def __init__(self, policy):
        self.ilegal_flows = []
        self.patterns_vulnerabilities_number = {}
        patterns = policy.getAllPatterns()
        for pattern in patterns:
            pattern_name = pattern.get_vulnerability()
            self.patterns_vulnerabilities_number[pattern_name] = 1


    def create_vulnerability(self, multilabelling, pattern, target, target_line, argument): 
        vulnerability_name = ""   
        for pattern_name, number in self.patterns_vulnerabilities_number.items():
            if pattern.get_vulnerability() == pattern_name:
                vulnerability_name = pattern.get_vulnerability() + str(number)
                self.patterns_vulnerabilities_number[pattern_name] = number + 1

        #ir buscar as sources
        multilabel_argument = multilabelling.get_Multilabel(argument)
        label_argument = multilabel_argument.get_label(pattern.get_vulnerability())        
        sources = label_argument.get_sources()
        sanitizers_on_argument = label_argument.get_sanitizers()

        sink = (target, str(target_line))

        unsanitized_flows = "no"

        sanitizers_on_pattern = pattern.get_sanitizer()
        if sanitizers_on_pattern != []:
            for sanitizer in sanitizers_on_pattern:
                inside = False
                for sanitizer_in in sanitizers_on_argument:
                    if sanitizer_in[0] == sanitizer:
                        inside = True
                
                if not inside :
                    unsanitized_flows = "yes"
                    break
        else:
            unsanitized_flows = "yes"

        for source in sources:
            self.ilegal_flows.append(IlegalFlow(vulnerability_name, source, sink, unsanitized_flows, sanitizers_on_argument))

        return

class IlegalFlow:
    def __init__(self, vulnerability, source, sink, unsanitized_flow, sanitized_flows) :
        self.Vulnerability = vulnerability
        self.source = source
        self.sink = sink
        self.unsanitized_flow = unsanitized_flow
        self.sanitized_flows = sanitized_flows